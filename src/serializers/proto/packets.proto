// packets.proto
package packets;
syntax = "proto3";

enum DataType {
	DATATYPE_UNDEFINED = 0;
	DATATYPE_NULL = 1;
	DATATYPE_JSON = 2;
	DATATYPE_BUFFER = 3;
}

message PacketEvent {
	required string ver 		= 1;
	required string sender 		= 2;
	required string id 			= 3;
	required string event 		= 4;
	optional bytes data 		= 5;
	required DataType dataType  = 6;
	repeated string groups 		= 7;
	required bool broadcast		= 8;
	required string meta 		= 9;
	required int32 level 		= 10;
	optional bool tracing 		= 11;
	optional string parentID 	= 12;
	optional string requestID 	= 13;
	optional bool stream 		= 14;
	optional int32 seq 			= 15;
	optional string caller 		= 16;
	required bool needAck		= 17;
}

message PacketRequest {
	required string ver 			= 1;
	required string sender 			= 2;
	required string id 				= 3;
	required string action 			= 4;
	optional bytes params 			= 5;
	required DataType paramsType  	= 6;
	required string meta 			= 7;
	required double timeout			= 8;
	required int32 level 			= 9;
	optional bool tracing 			= 10;
	optional string parentID 		= 11;
	optional string requestID 		= 12;
	optional bool stream 			= 13;
	optional int32 seq 				= 14;
	optional string caller 			= 15;
}

message PacketResponse {
	required string ver 		= 1;
	required string sender 		= 2;
	required string id 			= 3;
	required bool success 		= 4;
	optional bytes data 		= 5;
	required DataType dataType  = 6;
	optional string error 		= 7;
	required string meta 		= 8;
	optional bool stream 		= 9;
	optional int32 seq 			= 10;
}

message PacketDiscover {
	required string ver 		= 1;
	required string sender 		= 2;
}

message PacketInfo {
	required string ver 			= 1;
	required string sender 			= 2;
	required string services		= 3;
	required string config			= 4;

	repeated string ipList			= 5;
	required string hostname		= 6;
	required Client client 			= 7;
	required int32  seq 			= 8;
	required string instanceID		= 9;
	required string metadata		= 10;

	message Client {
		required string type 			= 1;
		required string version 		= 2;
		required string langVersion 	= 3;
	}

}

message PacketDisconnect {
	required string ver 	= 1;
	required string sender 	= 2;
}

message PacketHeartbeat {
	required string ver 		= 1;
	required string sender 		= 2;
	required double cpu 		= 3;
}

message PacketPing {
	required string ver 		= 1;
	required string sender 		= 2;
	required int64 time 		= 3;
	optional string id			= 4;
}

message PacketPong {
	required string ver 		= 1;
	required string sender 		= 2;
	required int64 time 		= 3;
	required int64 arrived 		= 4;
	optional string id			= 5;
}

message PacketGossipHello {
	required string ver 		= 1;
	required string sender 		= 2;
	required string host 		= 3;
	required int32 port 		= 4;
}

message PacketGossipRequest {
	required string ver 			= 1;
	required string sender 			= 2;
	optional string online			= 3;
	optional string offline			= 4;
}

message PacketGossipResponse {
	required string ver 			= 1;
	required string sender 			= 2;
	optional string online			= 3;
	optional string offline			= 4;
}
